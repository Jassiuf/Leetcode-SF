class Solution {
    
    public List<List<Integer>> combinationSum(int[] nums, int target) {
        // sort 
        Arrays.sort(nums);
        // make list
        List<List<Integer>> res = new ArrayList<>();
        // backtrack
        backtrack(nums, res, new ArrayList<Integer>(), 0, target, 0);
        // give result
        return res;
    }
    
    public void backtrack(int[] nums,List<List<Integer>> res, List<Integer> path, int sum, int target, int index) {
        // base case sum exceeds target
        if (sum > target) return;
        // add to result
        if (sum == target) {
            res.add(new ArrayList<>(path));
            return;
        }
        // Make a choice, using loop 
         for (int i = index; i < nums.length; i++) {
             
             //choose
             sum += nums[i];
             path.add(nums[i]);
             //explore
             backtrack(nums, res, path, sum, target, i);
             //unchoose
             sum -= nums[i];
             path.remove(path.size() - 1);
         }
        
    }
    
}
